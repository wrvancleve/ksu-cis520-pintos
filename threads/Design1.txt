
CIS 520 - Programming Project #1

                   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

William Van Cleve <vancleve@ksu.edu>
Shawn Kirby <skirby@k-state.edu>
Connor McElroy <>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for
>> the TA, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation,
>> course text, lecture notes, and course staff.


                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

     thread.h:
          int64_t wake_tick;                  /* Wake up tick of a sleeping thread */


     timer.c:
          static struct list sleep_list;      /* List of sleeping threads. */

          /* Function to determine the smallest wake tick between two threads

             Inspired by: http://stuartharrell.com/blog/2016/12/16/efficient-alarm-clock/ */
          static bool wake_tick_less_func(const struct list_elem *e1, const struct list_elem *e2, void *aux UNUSED) {

               struct thread *t1 = list_entry(e1, struct thread, elem);
               struct thread *t2 = list_entry(e2, struct thread, elem); 
               return t1->wake_tick < t2->wake_tick; 
          
}


---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to your timer_sleep(),
>> including the effects of the timer interrupt handler.

     timer_sleep():
          1: Check if the ticks parameter is valid. (Not negative or zero)
          2: Get the current running thread.
          3: Set the current thread's wake tick to the current tick plus the amount of ticks to sleep.
          4: Insert sleeping thread into the sleeping list by its wake tick.
          5: Block the thread
               
     timer_interrupt():
          1: Get the first element in the sleeping list.
          2: Loop through the sleeping list.
               1: Get element's thread.
               2: If thread's wake tick is greater than the current tick, end loop. (List contains no threads that need to wake up)
               3: Else remove thread from sleeping list to be woken up.
               4: Unblock/wake thread.
               5: Get next list element.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

     The sleeping list is ordered by wake ticks. So when iterating through the sleeping list we can stop
     when we reach a sleeping thread with a wake tick that hasn't happened yet. We can stop there because
     all threads following this thread in the list will have wake ticks the same or larger. No other thread
     needs to be woken up. This allows for shorter times in the timer interrupt handler.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?


>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?


---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> other designs that you considered?



             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.


---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?


              ADVANCED SCHEDULER [EXTRA CREDIT]
              =================================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

